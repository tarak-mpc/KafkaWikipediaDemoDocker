/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.cmatta.kafka.streams.wikipedia.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WikipediaChange extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WikipediaChange\",\"namespace\":\"org.cmatta.kafka.streams.wikipedia.avro\",\"fields\":[{\"name\":\"createdat\",\"type\":\"long\"},{\"name\":\"wikipage\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"isnew\",\"type\":\"boolean\"},{\"name\":\"isminor\",\"type\":\"boolean\"},{\"name\":\"isunpatrolled\",\"type\":\"boolean\"},{\"name\":\"isbot\",\"type\":\"boolean\"},{\"name\":\"diffurl\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"username\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bytechange\",\"type\":\"int\"},{\"name\":\"commitmessage\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long createdat;
  @Deprecated public java.lang.String wikipage;
  @Deprecated public boolean isnew;
  @Deprecated public boolean isminor;
  @Deprecated public boolean isunpatrolled;
  @Deprecated public boolean isbot;
  @Deprecated public java.lang.String diffurl;
  @Deprecated public java.lang.String username;
  @Deprecated public int bytechange;
  @Deprecated public java.lang.String commitmessage;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public WikipediaChange() {}

  /**
   * All-args constructor.
   */
  public WikipediaChange(java.lang.Long createdat, java.lang.String wikipage, java.lang.Boolean isnew, java.lang.Boolean isminor, java.lang.Boolean isunpatrolled, java.lang.Boolean isbot, java.lang.String diffurl, java.lang.String username, java.lang.Integer bytechange, java.lang.String commitmessage) {
    this.createdat = createdat;
    this.wikipage = wikipage;
    this.isnew = isnew;
    this.isminor = isminor;
    this.isunpatrolled = isunpatrolled;
    this.isbot = isbot;
    this.diffurl = diffurl;
    this.username = username;
    this.bytechange = bytechange;
    this.commitmessage = commitmessage;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return createdat;
    case 1: return wikipage;
    case 2: return isnew;
    case 3: return isminor;
    case 4: return isunpatrolled;
    case 5: return isbot;
    case 6: return diffurl;
    case 7: return username;
    case 8: return bytechange;
    case 9: return commitmessage;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: createdat = (java.lang.Long)value$; break;
    case 1: wikipage = (java.lang.String)value$; break;
    case 2: isnew = (java.lang.Boolean)value$; break;
    case 3: isminor = (java.lang.Boolean)value$; break;
    case 4: isunpatrolled = (java.lang.Boolean)value$; break;
    case 5: isbot = (java.lang.Boolean)value$; break;
    case 6: diffurl = (java.lang.String)value$; break;
    case 7: username = (java.lang.String)value$; break;
    case 8: bytechange = (java.lang.Integer)value$; break;
    case 9: commitmessage = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'createdat' field.
   */
  public java.lang.Long getCreatedat() {
    return createdat;
  }

  /**
   * Sets the value of the 'createdat' field.
   * @param value the value to set.
   */
  public void setCreatedat(java.lang.Long value) {
    this.createdat = value;
  }

  /**
   * Gets the value of the 'wikipage' field.
   */
  public java.lang.String getWikipage() {
    return wikipage;
  }

  /**
   * Sets the value of the 'wikipage' field.
   * @param value the value to set.
   */
  public void setWikipage(java.lang.String value) {
    this.wikipage = value;
  }

  /**
   * Gets the value of the 'isnew' field.
   */
  public java.lang.Boolean getIsnew() {
    return isnew;
  }

  /**
   * Sets the value of the 'isnew' field.
   * @param value the value to set.
   */
  public void setIsnew(java.lang.Boolean value) {
    this.isnew = value;
  }

  /**
   * Gets the value of the 'isminor' field.
   */
  public java.lang.Boolean getIsminor() {
    return isminor;
  }

  /**
   * Sets the value of the 'isminor' field.
   * @param value the value to set.
   */
  public void setIsminor(java.lang.Boolean value) {
    this.isminor = value;
  }

  /**
   * Gets the value of the 'isunpatrolled' field.
   */
  public java.lang.Boolean getIsunpatrolled() {
    return isunpatrolled;
  }

  /**
   * Sets the value of the 'isunpatrolled' field.
   * @param value the value to set.
   */
  public void setIsunpatrolled(java.lang.Boolean value) {
    this.isunpatrolled = value;
  }

  /**
   * Gets the value of the 'isbot' field.
   */
  public java.lang.Boolean getIsbot() {
    return isbot;
  }

  /**
   * Sets the value of the 'isbot' field.
   * @param value the value to set.
   */
  public void setIsbot(java.lang.Boolean value) {
    this.isbot = value;
  }

  /**
   * Gets the value of the 'diffurl' field.
   */
  public java.lang.String getDiffurl() {
    return diffurl;
  }

  /**
   * Sets the value of the 'diffurl' field.
   * @param value the value to set.
   */
  public void setDiffurl(java.lang.String value) {
    this.diffurl = value;
  }

  /**
   * Gets the value of the 'username' field.
   */
  public java.lang.String getUsername() {
    return username;
  }

  /**
   * Sets the value of the 'username' field.
   * @param value the value to set.
   */
  public void setUsername(java.lang.String value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'bytechange' field.
   */
  public java.lang.Integer getBytechange() {
    return bytechange;
  }

  /**
   * Sets the value of the 'bytechange' field.
   * @param value the value to set.
   */
  public void setBytechange(java.lang.Integer value) {
    this.bytechange = value;
  }

  /**
   * Gets the value of the 'commitmessage' field.
   */
  public java.lang.String getCommitmessage() {
    return commitmessage;
  }

  /**
   * Sets the value of the 'commitmessage' field.
   * @param value the value to set.
   */
  public void setCommitmessage(java.lang.String value) {
    this.commitmessage = value;
  }

  /** Creates a new WikipediaChange RecordBuilder */
  public static org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder newBuilder() {
    return new org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder();
  }
  
  /** Creates a new WikipediaChange RecordBuilder by copying an existing Builder */
  public static org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder newBuilder(org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder other) {
    return new org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder(other);
  }
  
  /** Creates a new WikipediaChange RecordBuilder by copying an existing WikipediaChange instance */
  public static org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder newBuilder(org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange other) {
    return new org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder(other);
  }
  
  /**
   * RecordBuilder for WikipediaChange instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WikipediaChange>
    implements org.apache.avro.data.RecordBuilder<WikipediaChange> {

    private long createdat;
    private java.lang.String wikipage;
    private boolean isnew;
    private boolean isminor;
    private boolean isunpatrolled;
    private boolean isbot;
    private java.lang.String diffurl;
    private java.lang.String username;
    private int bytechange;
    private java.lang.String commitmessage;

    /** Creates a new Builder */
    private Builder() {
      super(org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.createdat)) {
        this.createdat = data().deepCopy(fields()[0].schema(), other.createdat);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.wikipage)) {
        this.wikipage = data().deepCopy(fields()[1].schema(), other.wikipage);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isnew)) {
        this.isnew = data().deepCopy(fields()[2].schema(), other.isnew);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.isminor)) {
        this.isminor = data().deepCopy(fields()[3].schema(), other.isminor);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isunpatrolled)) {
        this.isunpatrolled = data().deepCopy(fields()[4].schema(), other.isunpatrolled);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isbot)) {
        this.isbot = data().deepCopy(fields()[5].schema(), other.isbot);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.diffurl)) {
        this.diffurl = data().deepCopy(fields()[6].schema(), other.diffurl);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.username)) {
        this.username = data().deepCopy(fields()[7].schema(), other.username);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bytechange)) {
        this.bytechange = data().deepCopy(fields()[8].schema(), other.bytechange);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.commitmessage)) {
        this.commitmessage = data().deepCopy(fields()[9].schema(), other.commitmessage);
        fieldSetFlags()[9] = true;
      }
    }
    
    /** Creates a Builder by copying an existing WikipediaChange instance */
    private Builder(org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange other) {
            super(org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.SCHEMA$);
      if (isValidValue(fields()[0], other.createdat)) {
        this.createdat = data().deepCopy(fields()[0].schema(), other.createdat);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.wikipage)) {
        this.wikipage = data().deepCopy(fields()[1].schema(), other.wikipage);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isnew)) {
        this.isnew = data().deepCopy(fields()[2].schema(), other.isnew);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.isminor)) {
        this.isminor = data().deepCopy(fields()[3].schema(), other.isminor);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isunpatrolled)) {
        this.isunpatrolled = data().deepCopy(fields()[4].schema(), other.isunpatrolled);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isbot)) {
        this.isbot = data().deepCopy(fields()[5].schema(), other.isbot);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.diffurl)) {
        this.diffurl = data().deepCopy(fields()[6].schema(), other.diffurl);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.username)) {
        this.username = data().deepCopy(fields()[7].schema(), other.username);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bytechange)) {
        this.bytechange = data().deepCopy(fields()[8].schema(), other.bytechange);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.commitmessage)) {
        this.commitmessage = data().deepCopy(fields()[9].schema(), other.commitmessage);
        fieldSetFlags()[9] = true;
      }
    }

    /** Gets the value of the 'createdat' field */
    public java.lang.Long getCreatedat() {
      return createdat;
    }
    
    /** Sets the value of the 'createdat' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder setCreatedat(long value) {
      validate(fields()[0], value);
      this.createdat = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'createdat' field has been set */
    public boolean hasCreatedat() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'createdat' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder clearCreatedat() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'wikipage' field */
    public java.lang.String getWikipage() {
      return wikipage;
    }
    
    /** Sets the value of the 'wikipage' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder setWikipage(java.lang.String value) {
      validate(fields()[1], value);
      this.wikipage = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'wikipage' field has been set */
    public boolean hasWikipage() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'wikipage' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder clearWikipage() {
      wikipage = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'isnew' field */
    public java.lang.Boolean getIsnew() {
      return isnew;
    }
    
    /** Sets the value of the 'isnew' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder setIsnew(boolean value) {
      validate(fields()[2], value);
      this.isnew = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'isnew' field has been set */
    public boolean hasIsnew() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'isnew' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder clearIsnew() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'isminor' field */
    public java.lang.Boolean getIsminor() {
      return isminor;
    }
    
    /** Sets the value of the 'isminor' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder setIsminor(boolean value) {
      validate(fields()[3], value);
      this.isminor = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'isminor' field has been set */
    public boolean hasIsminor() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'isminor' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder clearIsminor() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'isunpatrolled' field */
    public java.lang.Boolean getIsunpatrolled() {
      return isunpatrolled;
    }
    
    /** Sets the value of the 'isunpatrolled' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder setIsunpatrolled(boolean value) {
      validate(fields()[4], value);
      this.isunpatrolled = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'isunpatrolled' field has been set */
    public boolean hasIsunpatrolled() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'isunpatrolled' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder clearIsunpatrolled() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'isbot' field */
    public java.lang.Boolean getIsbot() {
      return isbot;
    }
    
    /** Sets the value of the 'isbot' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder setIsbot(boolean value) {
      validate(fields()[5], value);
      this.isbot = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'isbot' field has been set */
    public boolean hasIsbot() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'isbot' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder clearIsbot() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'diffurl' field */
    public java.lang.String getDiffurl() {
      return diffurl;
    }
    
    /** Sets the value of the 'diffurl' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder setDiffurl(java.lang.String value) {
      validate(fields()[6], value);
      this.diffurl = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'diffurl' field has been set */
    public boolean hasDiffurl() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'diffurl' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder clearDiffurl() {
      diffurl = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'username' field */
    public java.lang.String getUsername() {
      return username;
    }
    
    /** Sets the value of the 'username' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder setUsername(java.lang.String value) {
      validate(fields()[7], value);
      this.username = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'username' field has been set */
    public boolean hasUsername() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'username' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder clearUsername() {
      username = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'bytechange' field */
    public java.lang.Integer getBytechange() {
      return bytechange;
    }
    
    /** Sets the value of the 'bytechange' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder setBytechange(int value) {
      validate(fields()[8], value);
      this.bytechange = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'bytechange' field has been set */
    public boolean hasBytechange() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'bytechange' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder clearBytechange() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'commitmessage' field */
    public java.lang.String getCommitmessage() {
      return commitmessage;
    }
    
    /** Sets the value of the 'commitmessage' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder setCommitmessage(java.lang.String value) {
      validate(fields()[9], value);
      this.commitmessage = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'commitmessage' field has been set */
    public boolean hasCommitmessage() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'commitmessage' field */
    public org.cmatta.kafka.streams.wikipedia.avro.WikipediaChange.Builder clearCommitmessage() {
      commitmessage = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public WikipediaChange build() {
      try {
        WikipediaChange record = new WikipediaChange();
        record.createdat = fieldSetFlags()[0] ? this.createdat : (java.lang.Long) defaultValue(fields()[0]);
        record.wikipage = fieldSetFlags()[1] ? this.wikipage : (java.lang.String) defaultValue(fields()[1]);
        record.isnew = fieldSetFlags()[2] ? this.isnew : (java.lang.Boolean) defaultValue(fields()[2]);
        record.isminor = fieldSetFlags()[3] ? this.isminor : (java.lang.Boolean) defaultValue(fields()[3]);
        record.isunpatrolled = fieldSetFlags()[4] ? this.isunpatrolled : (java.lang.Boolean) defaultValue(fields()[4]);
        record.isbot = fieldSetFlags()[5] ? this.isbot : (java.lang.Boolean) defaultValue(fields()[5]);
        record.diffurl = fieldSetFlags()[6] ? this.diffurl : (java.lang.String) defaultValue(fields()[6]);
        record.username = fieldSetFlags()[7] ? this.username : (java.lang.String) defaultValue(fields()[7]);
        record.bytechange = fieldSetFlags()[8] ? this.bytechange : (java.lang.Integer) defaultValue(fields()[8]);
        record.commitmessage = fieldSetFlags()[9] ? this.commitmessage : (java.lang.String) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
