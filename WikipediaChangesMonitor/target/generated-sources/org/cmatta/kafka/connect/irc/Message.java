/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.cmatta.kafka.connect.irc;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Message extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Message\",\"namespace\":\"org.cmatta.kafka.connect.irc\",\"fields\":[{\"name\":\"createdat\",\"type\":{\"type\":\"long\",\"connect.doc\":\"When this message was received.\",\"connect.version\":1,\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\"}},{\"name\":\"channel\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"connect.doc\":\"The channel to which the message was sent.\"}},{\"name\":\"sender\",\"type\":{\"type\":\"record\",\"name\":\"User\",\"fields\":[{\"name\":\"nick\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"connect.doc\":\"The nick of the person who sent the message.\"}},{\"name\":\"login\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"connect.doc\":\"The login of the person who sent the message.\"}},{\"name\":\"hostname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"connect.doc\":\"The hostname of the person who sent the message.\"}}],\"connect.name\":\"org.cmatta.kafka.connect.irc.User\"}},{\"name\":\"message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"connect.doc\":\"The actual message sent to the channel.\"}}],\"connect.doc\":\"Basic IRC message.\",\"connect.name\":\"org.cmatta.kafka.connect.irc.Message\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long createdat;
  @Deprecated public java.lang.String channel;
  @Deprecated public org.cmatta.kafka.connect.irc.User sender;
  @Deprecated public java.lang.String message;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Message() {}

  /**
   * All-args constructor.
   */
  public Message(java.lang.Long createdat, java.lang.String channel, org.cmatta.kafka.connect.irc.User sender, java.lang.String message) {
    this.createdat = createdat;
    this.channel = channel;
    this.sender = sender;
    this.message = message;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return createdat;
    case 1: return channel;
    case 2: return sender;
    case 3: return message;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: createdat = (java.lang.Long)value$; break;
    case 1: channel = (java.lang.String)value$; break;
    case 2: sender = (org.cmatta.kafka.connect.irc.User)value$; break;
    case 3: message = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'createdat' field.
   */
  public java.lang.Long getCreatedat() {
    return createdat;
  }

  /**
   * Sets the value of the 'createdat' field.
   * @param value the value to set.
   */
  public void setCreatedat(java.lang.Long value) {
    this.createdat = value;
  }

  /**
   * Gets the value of the 'channel' field.
   */
  public java.lang.String getChannel() {
    return channel;
  }

  /**
   * Sets the value of the 'channel' field.
   * @param value the value to set.
   */
  public void setChannel(java.lang.String value) {
    this.channel = value;
  }

  /**
   * Gets the value of the 'sender' field.
   */
  public org.cmatta.kafka.connect.irc.User getSender() {
    return sender;
  }

  /**
   * Sets the value of the 'sender' field.
   * @param value the value to set.
   */
  public void setSender(org.cmatta.kafka.connect.irc.User value) {
    this.sender = value;
  }

  /**
   * Gets the value of the 'message' field.
   */
  public java.lang.String getMessage() {
    return message;
  }

  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.String value) {
    this.message = value;
  }

  /** Creates a new Message RecordBuilder */
  public static org.cmatta.kafka.connect.irc.Message.Builder newBuilder() {
    return new org.cmatta.kafka.connect.irc.Message.Builder();
  }
  
  /** Creates a new Message RecordBuilder by copying an existing Builder */
  public static org.cmatta.kafka.connect.irc.Message.Builder newBuilder(org.cmatta.kafka.connect.irc.Message.Builder other) {
    return new org.cmatta.kafka.connect.irc.Message.Builder(other);
  }
  
  /** Creates a new Message RecordBuilder by copying an existing Message instance */
  public static org.cmatta.kafka.connect.irc.Message.Builder newBuilder(org.cmatta.kafka.connect.irc.Message other) {
    return new org.cmatta.kafka.connect.irc.Message.Builder(other);
  }
  
  /**
   * RecordBuilder for Message instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Message>
    implements org.apache.avro.data.RecordBuilder<Message> {

    private long createdat;
    private java.lang.String channel;
    private org.cmatta.kafka.connect.irc.User sender;
    private java.lang.String message;

    /** Creates a new Builder */
    private Builder() {
      super(org.cmatta.kafka.connect.irc.Message.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.cmatta.kafka.connect.irc.Message.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.createdat)) {
        this.createdat = data().deepCopy(fields()[0].schema(), other.createdat);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.channel)) {
        this.channel = data().deepCopy(fields()[1].schema(), other.channel);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sender)) {
        this.sender = data().deepCopy(fields()[2].schema(), other.sender);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.message)) {
        this.message = data().deepCopy(fields()[3].schema(), other.message);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Message instance */
    private Builder(org.cmatta.kafka.connect.irc.Message other) {
            super(org.cmatta.kafka.connect.irc.Message.SCHEMA$);
      if (isValidValue(fields()[0], other.createdat)) {
        this.createdat = data().deepCopy(fields()[0].schema(), other.createdat);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.channel)) {
        this.channel = data().deepCopy(fields()[1].schema(), other.channel);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sender)) {
        this.sender = data().deepCopy(fields()[2].schema(), other.sender);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.message)) {
        this.message = data().deepCopy(fields()[3].schema(), other.message);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'createdat' field */
    public java.lang.Long getCreatedat() {
      return createdat;
    }
    
    /** Sets the value of the 'createdat' field */
    public org.cmatta.kafka.connect.irc.Message.Builder setCreatedat(long value) {
      validate(fields()[0], value);
      this.createdat = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'createdat' field has been set */
    public boolean hasCreatedat() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'createdat' field */
    public org.cmatta.kafka.connect.irc.Message.Builder clearCreatedat() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'channel' field */
    public java.lang.String getChannel() {
      return channel;
    }
    
    /** Sets the value of the 'channel' field */
    public org.cmatta.kafka.connect.irc.Message.Builder setChannel(java.lang.String value) {
      validate(fields()[1], value);
      this.channel = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'channel' field has been set */
    public boolean hasChannel() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'channel' field */
    public org.cmatta.kafka.connect.irc.Message.Builder clearChannel() {
      channel = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'sender' field */
    public org.cmatta.kafka.connect.irc.User getSender() {
      return sender;
    }
    
    /** Sets the value of the 'sender' field */
    public org.cmatta.kafka.connect.irc.Message.Builder setSender(org.cmatta.kafka.connect.irc.User value) {
      validate(fields()[2], value);
      this.sender = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'sender' field has been set */
    public boolean hasSender() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'sender' field */
    public org.cmatta.kafka.connect.irc.Message.Builder clearSender() {
      sender = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'message' field */
    public java.lang.String getMessage() {
      return message;
    }
    
    /** Sets the value of the 'message' field */
    public org.cmatta.kafka.connect.irc.Message.Builder setMessage(java.lang.String value) {
      validate(fields()[3], value);
      this.message = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'message' field has been set */
    public boolean hasMessage() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'message' field */
    public org.cmatta.kafka.connect.irc.Message.Builder clearMessage() {
      message = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Message build() {
      try {
        Message record = new Message();
        record.createdat = fieldSetFlags()[0] ? this.createdat : (java.lang.Long) defaultValue(fields()[0]);
        record.channel = fieldSetFlags()[1] ? this.channel : (java.lang.String) defaultValue(fields()[1]);
        record.sender = fieldSetFlags()[2] ? this.sender : (org.cmatta.kafka.connect.irc.User) defaultValue(fields()[2]);
        record.message = fieldSetFlags()[3] ? this.message : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
