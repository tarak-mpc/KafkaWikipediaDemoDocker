/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.cmatta.kafka.connect.irc;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"org.cmatta.kafka.connect.irc\",\"fields\":[{\"name\":\"nick\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"connect.doc\":\"The nick of the person who sent the message.\"}},{\"name\":\"login\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"connect.doc\":\"The login of the person who sent the message.\"}},{\"name\":\"hostname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"connect.doc\":\"The hostname of the person who sent the message.\"}}],\"connect.name\":\"org.cmatta.kafka.connect.irc.User\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String nick;
  @Deprecated public java.lang.String login;
  @Deprecated public java.lang.String hostname;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public User() {}

  /**
   * All-args constructor.
   */
  public User(java.lang.String nick, java.lang.String login, java.lang.String hostname) {
    this.nick = nick;
    this.login = login;
    this.hostname = hostname;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return nick;
    case 1: return login;
    case 2: return hostname;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: nick = (java.lang.String)value$; break;
    case 1: login = (java.lang.String)value$; break;
    case 2: hostname = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'nick' field.
   */
  public java.lang.String getNick() {
    return nick;
  }

  /**
   * Sets the value of the 'nick' field.
   * @param value the value to set.
   */
  public void setNick(java.lang.String value) {
    this.nick = value;
  }

  /**
   * Gets the value of the 'login' field.
   */
  public java.lang.String getLogin() {
    return login;
  }

  /**
   * Sets the value of the 'login' field.
   * @param value the value to set.
   */
  public void setLogin(java.lang.String value) {
    this.login = value;
  }

  /**
   * Gets the value of the 'hostname' field.
   */
  public java.lang.String getHostname() {
    return hostname;
  }

  /**
   * Sets the value of the 'hostname' field.
   * @param value the value to set.
   */
  public void setHostname(java.lang.String value) {
    this.hostname = value;
  }

  /** Creates a new User RecordBuilder */
  public static org.cmatta.kafka.connect.irc.User.Builder newBuilder() {
    return new org.cmatta.kafka.connect.irc.User.Builder();
  }
  
  /** Creates a new User RecordBuilder by copying an existing Builder */
  public static org.cmatta.kafka.connect.irc.User.Builder newBuilder(org.cmatta.kafka.connect.irc.User.Builder other) {
    return new org.cmatta.kafka.connect.irc.User.Builder(other);
  }
  
  /** Creates a new User RecordBuilder by copying an existing User instance */
  public static org.cmatta.kafka.connect.irc.User.Builder newBuilder(org.cmatta.kafka.connect.irc.User other) {
    return new org.cmatta.kafka.connect.irc.User.Builder(other);
  }
  
  /**
   * RecordBuilder for User instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    private java.lang.String nick;
    private java.lang.String login;
    private java.lang.String hostname;

    /** Creates a new Builder */
    private Builder() {
      super(org.cmatta.kafka.connect.irc.User.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.cmatta.kafka.connect.irc.User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.nick)) {
        this.nick = data().deepCopy(fields()[0].schema(), other.nick);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.login)) {
        this.login = data().deepCopy(fields()[1].schema(), other.login);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.hostname)) {
        this.hostname = data().deepCopy(fields()[2].schema(), other.hostname);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing User instance */
    private Builder(org.cmatta.kafka.connect.irc.User other) {
            super(org.cmatta.kafka.connect.irc.User.SCHEMA$);
      if (isValidValue(fields()[0], other.nick)) {
        this.nick = data().deepCopy(fields()[0].schema(), other.nick);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.login)) {
        this.login = data().deepCopy(fields()[1].schema(), other.login);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.hostname)) {
        this.hostname = data().deepCopy(fields()[2].schema(), other.hostname);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'nick' field */
    public java.lang.String getNick() {
      return nick;
    }
    
    /** Sets the value of the 'nick' field */
    public org.cmatta.kafka.connect.irc.User.Builder setNick(java.lang.String value) {
      validate(fields()[0], value);
      this.nick = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'nick' field has been set */
    public boolean hasNick() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'nick' field */
    public org.cmatta.kafka.connect.irc.User.Builder clearNick() {
      nick = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'login' field */
    public java.lang.String getLogin() {
      return login;
    }
    
    /** Sets the value of the 'login' field */
    public org.cmatta.kafka.connect.irc.User.Builder setLogin(java.lang.String value) {
      validate(fields()[1], value);
      this.login = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'login' field has been set */
    public boolean hasLogin() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'login' field */
    public org.cmatta.kafka.connect.irc.User.Builder clearLogin() {
      login = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'hostname' field */
    public java.lang.String getHostname() {
      return hostname;
    }
    
    /** Sets the value of the 'hostname' field */
    public org.cmatta.kafka.connect.irc.User.Builder setHostname(java.lang.String value) {
      validate(fields()[2], value);
      this.hostname = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'hostname' field has been set */
    public boolean hasHostname() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'hostname' field */
    public org.cmatta.kafka.connect.irc.User.Builder clearHostname() {
      hostname = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public User build() {
      try {
        User record = new User();
        record.nick = fieldSetFlags()[0] ? this.nick : (java.lang.String) defaultValue(fields()[0]);
        record.login = fieldSetFlags()[1] ? this.login : (java.lang.String) defaultValue(fields()[1]);
        record.hostname = fieldSetFlags()[2] ? this.hostname : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
